openapi: 3.0.0
info:
  title: onecx-bookmark-bff
  description: Backend-For-Frontend (BFF) service for onecx-bookmark. This API provides endpoints to manage Bookmarks
  version: 1.0.0
servers:
  - url: "http://onecx-bookmark-bff:8080"
tags:
  - name: bookmarksInternal
    description: Managing Bookmarks
  - name: imagesInternal
    description: Managing Bookmark Images
paths:
  /bookmarks:
    post:
      x-onecx:
        permissions:
          bookmark:
            - write
      tags:
        - bookmarksInternal
      description: Create a new bookmark item
      operationId: createNewBookmark
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBookmark'
      responses:
        '201':
          description: Bookmark created successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
  /bookmarks/search:
    post:
      x-onecx:
        permissions:
          bookmark:
            - read
      tags:
        - bookmarksInternal
      description: Search for bookmarks by criteria
      operationId: searchBookmarksByCriteria
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookmarkSearchCriteria'
      responses:
        '200':
          description: Bookmark search results retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookmarkPageResult'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
  /bookmarks/user:
    post:
      x-onecx:
        permissions:
          bookmark:
            - read
      tags:
        - bookmarksInternal
      description: Search for bookmarks of the requesting user by criteria
      operationId: searchUserBookmarksByCriteria
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookmarkSearchCriteria'
      responses:
        '200':
          description: Bookmark search results retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookmarkPageResult'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
  /bookmarks/{id}:
    put:
      x-onecx:
        permissions:
          bookmark:
            - write
      tags:
        - bookmarksInternal
      description: Update a bookmark by its id
      operationId: updateBookmark
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBookmark'
      responses:
        "204":
          description: Bookmark updated successfully
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
        "404":
          description: Bookmark not found
    delete:
      x-onecx:
        permissions:
          bookmark:
            - delete
      tags:
        - bookmarksInternal
      description: Delete a bookmark by its id
      operationId: deleteBookmarkById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Bookmark deleted successfully
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
  /bookmarks/reorder:
    post:
      x-onecx:
        permissions:
          bookmark:
            - write
      tags:
        - bookmarksInternal
      description: Update the order of bookmarks
      operationId: updateBookmarksOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookmarkReorderRequest'
      responses:
        "200":
          description: Bookmark reordered successfully
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
  /bookmarks/export:
    post:
      x-onecx:
        permissions:
          bookmark:
            - read
      tags:
        - bookmarkExportImport
      description: Export bookmarks by workspace name and scopes
      operationId: exportBookmarks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportBookmarksRequest'
      responses:
        "200":
          description: Bookmarks exported successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookmarkSnapshot'
        "404":
          description: Bookmarks not found
  /bookmarks/{workspaceName}/import:
    post:
      x-onecx:
        permissions:
          bookmark:
            - write
      tags:
        - bookmarkExportImport
      description: Import bookmarks
      operationId: importBookmarks
      parameters:
        - in: path
          name: workspaceName
          required: true
          schema:
            type: string
        - in: query
          name: importMode
          schema:
            $ref: '#/components/schemas/EximMode'
        - in: query
          name: scopes
          schema:
            type: array
            minItems: 1
            items:
              $ref: '#/components/schemas/EximBookmarkScope'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookmarkSnapshot'
      responses:
        "200":
          description: Bookmarks imported successfully
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
  /images/product/{productName}:
    get:
      x-onecx:
        permissions:
          product:
            - read
      tags:
        - imagesInternal
      description: Get a product logo by its name
      operationId: getProductLogo
      parameters:
        - name: productName
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Product logo retrieved successfully
          content:
            image/*:
              schema:
                type: string
                format: binary
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
  /images/{refId}:
    post:
      x-onecx:
        permissions:
          bookmark:
            - write
      tags:
        - imagesInternal
      description: Upload an image by its reference id
      parameters:
        - name: refId
          in: path
          required: true
          schema:
            type: string
      operationId: uploadImage
      requestBody:
        required: true
        content:
          image/*:
            schema:
              type: string
              format: binary
      responses:
        "201":
          description: Image uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageInfo'
        "400":
          description: Bad Request
    get:
      x-onecx:
        permissions:
          bookmark:
            - read
      tags:
        - imagesInternal
      description: Get an image by its reference id
      operationId: getImage
      parameters:
        - name: refId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Image retrieved successfully
          content:
            image/*:
              schema:
                type: string
                format: binary
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
    delete:
      x-onecx:
        permissions:
          bookmark:
            - delete
      tags:
        - imagesInternal
      description: Delete an image by its reference id
      operationId: deleteImage
      parameters:
        - name: refId
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Image deleted successfully
components:
  schemas:
    ImageInfo:
      type: object
      properties:
        id:
          type: string
    BookmarkSnapshot:
      type: object
      properties:
        id:
          type: string
          minLength: 10
          description: ID of the request
        created:
          $ref: '#/components/schemas/OffsetDateTime'
        bookmarks:
          type: object
          nullable: false
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/EximBookmark'
    EximBookmark:
      type: object
      properties:
        displayName:
          type: string
        endpointName:
          type: string
        endpointParameters:
          type: object
          additionalProperties:
            type: string
        query:
          type: object
          additionalProperties:
            type: string
        fragment:
          type: string
        url:
          type: string
        productName:
          type: string
        appId:
          type: string
        scope:
          $ref: '#/components/schemas/EximBookmarkScope'
        imageUrl:
          type: string
        image:
          $ref: '#/components/schemas/Image'
    Image:
      type: object
      properties:
        imageData:
          type: string
          format: byte
        mimeType:
          type: string
    EximBookmarkScope:
      type: string
      enum:
        - PRIVATE
        - PUBLIC
    EximMode:
      type: string
      enum:
        - APPEND
        - OVERWRITE
    ExportBookmarksRequest:
      type: object
      required:
        - scopes
      properties:
        workspaceName:
          type: string
        scopes:
          type: array
          items:
            $ref: '#/components/schemas/EximBookmarkScope'
    BookmarkReorderRequest:
      type: object
      properties:
        bookmarks:
          type: array
          items:
            $ref: '#/components/schemas/UpdateBookmark'
    BookmarkSearchCriteria:
      required:
        - workspaceName
      type: object
      properties:
        workspaceName:
          type: string
        productName:
          type: string
        appId:
          type: string
        scope:
          $ref: '#/components/schemas/BookmarkScope'
        pageNumber:
          format: int32
          description: The number of page.
          default: 0
          type: integer
        pageSize:
          format: int32
          description: The size of page
          default: 100
          maximum: 1000
          type: integer
    Bookmark:
      required:
        - id
        - displayName
        - scope
        - workspaceName
        - position
      type: object
      properties:
        id:
          type: string
        modificationCount:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        displayName:
          type: string
        endpointName:
          type: string
        endpointParameters:
          type: object
          additionalProperties:
            type: string
        query:
          type: object
          additionalProperties:
            type: string
        fragment:
          type: string
        url:
          type: string
        userId:
          type: string
        workspaceName:
          type: string
        productName:
          type: string
        appId:
          type: string
        scope:
          $ref: '#/components/schemas/BookmarkScope'
        position:
          type: integer
          format: int32
        imageUrl:
          type: string
    BookmarkPageResult:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
          description: The total elements in the resource.
        number:
          type: integer
          format: int32
          default: 0
        size:
          type: integer
          format: int32
          default: 100
          maximum: 1000
        totalPages:
          type: integer
          format: int64
        stream:
          type: array
          items:
            $ref: '#/components/schemas/Bookmark'
    CreateBookmark:
      required:
        - displayName
        - workspaceName
        - scope
        - position
      type: object
      properties:
        displayName:
          type: string
        endpointName:
          type: string
        endpointParameters:
          type: object
          additionalProperties:
            type: string
        query:
          type: object
          additionalProperties:
            type: string
        fragment:
          type: string
        url:
          type: string
        userId:
          type: string
        workspaceName:
          type: string
        productName:
          type: string
        appId:
          type: string
        scope:
          $ref: '#/components/schemas/BookmarkScope'
        position:
          type: integer
          format: int32
        imageUrl:
          type: string
    UpdateBookmark:
      required:
        - displayName
        - modificationCount
        - position
        - id
      type: object
      properties:
        modificationCount:
          format: int32
          type: integer
        displayName:
          type: string
        position:
          type: integer
          format: int32
        id:
          type: string
        endpointName:
          type: string
        endpointParameters:
          type: object
          additionalProperties:
            type: string
        scope:
          $ref: '#/components/schemas/BookmarkScope'
        query:
          type: object
          additionalProperties:
            type: string
        fragment:
          type: string
        url:
          type: string
        userId:
          type: string
        imageUrl:
          type: string
    BookmarkScope:
      type: string
      enum:
        - PRIVATE
        - PUBLIC
    ProblemDetailResponse:
      type: object
      properties:
        errorCode:
          type: string
        detail:
          type: string
        params:
          type: array
          items:
            $ref: '#/components/schemas/ProblemDetailParam'
        invalidParams:
          type: array
          items:
            $ref: '#/components/schemas/ProblemDetailInvalidParam'
    ProblemDetailParam:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    ProblemDetailInvalidParam:
      type: object
      properties:
        name:
          type: string
        message:
          type: string
    OffsetDateTime:
      format: date-time
      type: string
      example: 2022-03-10T12:15:50-04:00
